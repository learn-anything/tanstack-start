/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PagesImport } from './routes/_pages'
import { Route as LandingImport } from './routes/_landing'
import { Route as LandingIndexImport } from './routes/_landing/index'
import { Route as PagesSplatImport } from './routes/_pages/$'

// Create/Update Routes

const PagesRoute = PagesImport.update({
  id: '/_pages',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  id: '/_landing',
  getParentRoute: () => rootRoute,
} as any)

const LandingIndexRoute = LandingIndexImport.update({
  path: '/',
  getParentRoute: () => LandingRoute,
} as any)

const PagesSplatRoute = PagesSplatImport.update({
  path: '/$',
  getParentRoute: () => PagesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/_pages': {
      id: '/_pages'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PagesImport
      parentRoute: typeof rootRoute
    }
    '/_pages/$': {
      id: '/_pages/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof PagesSplatImport
      parentRoute: typeof PagesImport
    }
    '/_landing/': {
      id: '/_landing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LandingIndexImport
      parentRoute: typeof LandingImport
    }
  }
}

// Create and export the route tree

interface LandingRouteChildren {
  LandingIndexRoute: typeof LandingIndexRoute
}

const LandingRouteChildren: LandingRouteChildren = {
  LandingIndexRoute: LandingIndexRoute,
}

const LandingRouteWithChildren =
  LandingRoute._addFileChildren(LandingRouteChildren)

interface PagesRouteChildren {
  PagesSplatRoute: typeof PagesSplatRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  PagesSplatRoute: PagesSplatRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PagesRouteWithChildren
  '/$': typeof PagesSplatRoute
  '/': typeof LandingIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PagesRouteWithChildren
  '/$': typeof PagesSplatRoute
  '/': typeof LandingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_landing': typeof LandingRouteWithChildren
  '/_pages': typeof PagesRouteWithChildren
  '/_pages/$': typeof PagesSplatRoute
  '/_landing/': typeof LandingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/$' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/$' | '/'
  id: '__root__' | '/_landing' | '/_pages' | '/_pages/$' | '/_landing/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LandingRoute: typeof LandingRouteWithChildren
  PagesRoute: typeof PagesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LandingRoute: LandingRouteWithChildren,
  PagesRoute: PagesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_landing",
        "/_pages"
      ]
    },
    "/_landing": {
      "filePath": "_landing.tsx",
      "children": [
        "/_landing/"
      ]
    },
    "/_pages": {
      "filePath": "_pages.tsx",
      "children": [
        "/_pages/$"
      ]
    },
    "/_pages/$": {
      "filePath": "_pages/$.tsx",
      "parent": "/_pages"
    },
    "/_landing/": {
      "filePath": "_landing/index.tsx",
      "parent": "/_landing"
    }
  }
}
ROUTE_MANIFEST_END */
